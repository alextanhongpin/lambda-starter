service: email

provider:
  name: aws
  description: Email delivery service
  runtime: nodejs6.10
  stage: prod
  region: ap-southeast-1
  profile: email-delivery
  memorySize: 128
  stackTags:
    Application: 'Salle'
    Environment: ${self:provider.stage}

  # NOTE: The lambda will be stored in S3 Bucket which we defined.
  # We do not want every deployment to create a new bucket.
  deploymentBucket: salle-serverless-deployment
  iamRoleStatements:
    - Sid: LambdaDLQPermissions
      Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt:
          - LambdaFunctionDeadLetterQueue
          - Arn

package:
  exclude:
    - copyright.js
    - src/**
    - .env

functions:
  email:
    handler: dist/index.email
    # NOTE: Environment variables cannot contain @ and , 
    environment:
      API_KEY: ${env:API_KEY}
    # NOTE: Create a new SNS topic with the name `email-prod`. The function
    # will be called every time a message is sent to the `email-prod` topic.
    events:
      - sns: email-prod
    # NOTE: Send the error to dead letter queue
    # onError: arn:aws:sqs:ap-southeast-1:*:email-dead-letter-queue-${self:provider.stage}
    # onError currently only supports SNS topic arns due to a race condition when using SQS queue arns and updating the IAM role. Please check the docs for more info.

resources:
  Resources:
    EmailLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        DeadLetterConfig:
          TargetArn:
            Fn::GetAtt:
              - LambdaFunctionDeadLetterQueue
              - Arn

    LambdaFunctionDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: email-dead-letter-queue-${self:provider.stage}
        MessageRetentionPeriod: 1209600 # 14 days in seconds